# This workflow is triggered on a schedule, and will update all the
# AUR packages in the repository.

---
name: Update all packages

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    branches:
      - "master"
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci
  DRY_RUN: ${{ github.ref_name != 'master' }}

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.output.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push full image reference to output
        id: output
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}"
          echo "image=${IMAGE,,}" >> $GITHUB_OUTPUT
  generate_pkgbuilds:
    runs-on: ubuntu-latest
    needs: [build_and_push_image]
    permissions:
      contents: write
    container: ${{ needs.build_and_push_image.outputs.image }}
    outputs:
      updated_packages: ${{ steps.generate_pkgbuilds.outputs.updated_packages }}
      last_sha: ${{ steps.generate_pkgbuilds.outputs.last_sha }}
    env:
      # To be able to use gh cli
      GH_TOKEN: ${{ github.token }}
      # GITHUB_TOKEN is sometimes used in scripts to avoid rate limiting
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate and commit PKGBUILDs
        id: generate_pkgbuilds
        shell: docker_entrypoint {0}
        run: |
          set -euo pipefail

          # https://github.com/actions/checkout/issues/363
          git config --global --add safe.directory $(realpath .)

          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          ci_gen_pkgbuilds
  update_packages:
    container: ${{ needs.build_and_push_image.outputs.image }}
    if: needs.generate_pkgbuilds.outputs.updated_packages != '[]'
    needs:
      - generate_pkgbuilds
      - build_and_push_image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate_pkgbuilds.outputs.updated_packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.generate_pkgbuilds.outputs.last_sha }}
      - name: Push to AUR
        shell: docker_entrypoint {0}
        env:
          ALLOW_EMPTY_COMMITS: "false"
          BUILD: "true"
          BUILD_FLAGS: "--clean --cleanbuild --syncdeps --noconfirm --noprogressbar"
          COMMIT_EMAIL: "github-actions[bot]@users.noreply.github.com"
          COMMIT_MESSAGE: "Automatic update"
          COMMIT_USERNAME: "github-actions[bot]"
          PKGBUILD: ./packages/${{ matrix.package }}/PKGBUILD
          PKGNAME: ${{ matrix.package }}
          SKIP_PUBLISH: ${{ env.DRY_RUN }}
          SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail

          docker_publish_pkgbuild
  update_readme:
    container: ${{ needs.build_and_push_image.outputs.image }}
    # if: needs.generate_pkgbuilds.outputs.updated_packages != '[]'
    if: ${{ always() }}
    needs:
      - build_and_push_image
      - generate_pkgbuilds
      - update_packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Checkout the latest state of the current branch
          ref: "${{ github.head_ref || github.ref_name }}"
      - name: Update README
        shell: docker_entrypoint {0}
        env:
          MAINTAINER: zebradil
          README_FILE: README.md
        run: |
          set -euo pipefail

          update_readme "$README_FILE" "$MAINTAINER"

          git add "$README_FILE"
          if git diff --cached --quiet; then
            echo "No changes to the README"
            exit 0
          fi

          # https://github.com/actions/checkout/issues/363
          git config --global --add safe.directory $(realpath .)

          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          git commit -m "Automatic update of README"
          git push
