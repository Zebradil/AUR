# This workflow is triggered on a schedule, and will update all the
# AUR packages in the repository.

---
name: Update all packages

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    branches:
      - "master"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.output.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push full image reference to output
        id: output
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}"
          echo "image=${IMAGE,,}" >> $GITHUB_OUTPUT
  generate-pkgbuilds:
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    permissions:
      contents: write
    container: ${{ needs.build-and-push-image.outputs.image }}
    outputs:
      updated_packages: ${{ steps.generate_pkgbuilds.outputs.updated_packages }}
      last_sha: ${{ steps.generate_pkgbuilds.outputs.last_sha }}
    env:
      # To be able to use gh cli
      GH_TOKEN: ${{ github.token }}
      # GITHUB_TOKEN is sometimes used in scripts to avoid rate limiting
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate and commit PKGBUILDs
        id: generate_pkgbuilds
        shell: bash
        run: |
          cd "${{ github.workspace }}"

          git config user.email "github-actions[bot]@github.com"
          git config user.name "GitHub Actions"

          updated_packages=()

          for package in packages/*; do
            pp="${package##*/}"
            ./scripts/bin/gen_pkgbuild "$pp"

            git add "$package/PKGBUILD"
            if git diff-index --quiet HEAD; then
              echo "No changes for $pp"
            else
              git commit -m "chore: update $pp"
              git push
              updated_packages+=("$pp")
            fi
          done

          if [[ ${#updated_packages[@]} -gt 0 ]]; then
            echo "Updated packages: ${updated_packages[*]}"
            echo "updated_packages=$( \
                printf '%s\n' "${updated_packages[@]}" \
                  | jq -Rnc '[inputs]' \
              )" >> $GITHUB_OUTPUT
          else
            echo "No packages updated"
            echo "updated_packages=[]" >> $GITHUB_OUTPUT
          fi

          echo "last_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
  update-packages:
    runs-on: ubuntu-latest
    needs: generate-pkgbuilds
    if: needs.generate_pkgbuilds.outputs.updated_packages != '[]'
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate_pkgbuilds.outputs.updated_packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.generate_pkgbuilds.outputs.last_sha }}
      - name: Push to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v2
        with:
          pkgname: ${{ matrix.package }}
          pkgbuild: ./packages/${{ matrix.package }}/PKGBUILD
          commit_message: "Automatic update"
          commit_username: "GitHub Actions"
          commit_email: "github-actions[bot]@github.com"
          allow_empty_commits: false
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
