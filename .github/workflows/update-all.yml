# This workflow is triggered on a schedule, and will update all the
# AUR packages in the repository.

---
name: Update all packages

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    branches:
      - "master"
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci
  DRY_RUN: ${{ github.ref_name != 'master' }}

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump vars context
        run: echo "${{ toJson(vars) }}"
      - name: Dump env context
        run: echo "${{ toJson(env) }}"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
  # This job just marks the start of the workflow run. It sets the status of the commit to pending.
  set_status:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - name: Set pending commit status
        uses: myrotvorets/set-commit-status-action@master
        with:
          status: pending
  build_and_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.output.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push full image reference to output
        id: output
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}"
          echo "image=${IMAGE,,}" >> $GITHUB_OUTPUT
  generate_pkgbuilds:
    runs-on: ubuntu-latest
    needs: [build_and_push_image]
    permissions:
      contents: write
    container: ${{ needs.build_and_push_image.outputs.image }}
    outputs:
      updated_packages: ${{ steps.generate_pkgbuilds.outputs.updated_packages }}
      last_sha: ${{ steps.generate_pkgbuilds.outputs.last_sha }}
    env:
      # To be able to use gh cli
      GH_TOKEN: ${{ github.token }}
      # GITHUB_TOKEN is sometimes used in scripts to avoid rate limiting
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: "${{ github.head_ref || github.ref_name }}"
          # use more powerful token on the default branch, otherwise use the default GITHUB_TOKEN
          token: ${{ github.ref_name == github.event.repository.default_branch && secrets.ZEBRADIL_REPO_TOKEN || github.token }}
      - name: Setup cache
        id: cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          # NOTE: `packages/*/*` instead of `packages/*` or `packages/**` has to be used as a workaround for the bugs:
          # - https://github.com/actions/cache/issues/364
          # - https://github.com/actions/toolkit/issues/713
          # Otherwise, the excluded files are still cached.
          # GitHub Actions is disappointing.
          path: |
            packages/*/*
            !packages/*/PKGBUILD
            !packages/*/pkgbuild_data.sh
          key: generate_pkgbuilds-latest-${{ github.run_id }}
          restore-keys: generate_pkgbuilds-latest
      - name: Debug cache
        run: |
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          find packages
      - name: Generate and commit PKGBUILDs
        id: generate_pkgbuilds
        shell: docker_entrypoint {0}
        run: |
          set -euo pipefail

          # https://github.com/actions/checkout/issues/363
          git config --global --add safe.directory $(realpath .)

          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          ci_gen_pkgbuilds
      - name: Debug cache
        run: |
          find packages
  update_packages:
    container: ${{ needs.build_and_push_image.outputs.image }}
    if: needs.generate_pkgbuilds.outputs.updated_packages != '[]'
    needs:
      - generate_pkgbuilds
      - build_and_push_image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate_pkgbuilds.outputs.updated_packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ needs.generate_pkgbuilds.outputs.last_sha }}
      - name: Push to AUR
        shell: docker_entrypoint {0}
        env:
          ALLOW_EMPTY_COMMITS: "false"
          BUILD: "true"
          BUILD_FLAGS: "--clean --cleanbuild --syncdeps --noconfirm --noprogressbar"
          COMMIT_EMAIL: "github-actions[bot]@users.noreply.github.com"
          COMMIT_MESSAGE: "Automatic update"
          COMMIT_USERNAME: "github-actions[bot]"
          PKGBUILD: ./packages/${{ matrix.package }}/PKGBUILD
          PKGNAME: ${{ matrix.package }}
          SKIP_PUBLISH: ${{ env.DRY_RUN }}
          SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail

          docker_publish_pkgbuild
  update_readme:
    container: ${{ needs.build_and_push_image.outputs.image }}
    # if: needs.generate_pkgbuilds.outputs.updated_packages != '[]'
    if: always()
    needs:
      - build_and_push_image
      - generate_pkgbuilds
      - update_packages
    runs-on: ubuntu-latest
    outputs:
      last_sha: ${{ steps.update_readme.outputs.last_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # Checkout the latest state of the current branch
          ref: ${{ github.head_ref || github.ref_name }}
          # use more powerful token on the master branch, otherwise use the default GITHUB_TOKEN
          token: ${{ github.ref_name == github.event.repository.default_branch && secrets.ZEBRADIL_REPO_TOKEN || github.token }}
      - name: Update README
        id: update_readme
        shell: docker_entrypoint {0}
        env:
          MAINTAINER: zebradil
          README_FILE: README.md
        run: |
          set -euo pipefail

          update_readme "$README_FILE" "$MAINTAINER"

          git add "$README_FILE"
          if git diff --cached --quiet; then
            echo "No changes to the README"
            exit 0
          fi

          # https://github.com/actions/checkout/issues/363
          git config --global --add safe.directory $(realpath .)

          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          git commit -m "chore(docs): update README [skip ci]"
          git push

          echo "last_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
  # This job contains rules to decide whether the workflow run was successful or not. It sets the status of the commit
  # to success or failure. The status should be selected as required in the branch protection rules.
  report_status:
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request')
    needs:
      - build_and_push_image
      - generate_pkgbuilds
      - update_packages
      - update_readme
    permissions:
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - name: Figure out overall status
        id: overall_status
        uses: re-actors/alls-green@release/v1
        with:
          allowed-skips: update_packages
          jobs: ${{ toJSON(needs) }}
      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          status: ${{ steps.overall_status.outputs.result }}
          # When running on a PR, set the commit status on the latest commit in
          # the branch. Otherwise, the PR will be waiting for the commit status
          # indefinitely. This, in particular, blocks Renovate from merging PRs
          # automatically.
          # If running on a push, set the commit status on the current commit.
          sha: ${{ needs.update_readme.outputs.last_sha || needs.generate_pkgbuilds.outputs.last_sha || github.sha }}
