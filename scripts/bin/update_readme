#!/bin/bash

set -euo pipefail

rdm:usage() {
    cat <<EOF
Usage: $(basename "$0") FILE MAINTAINER

Updates a given markdown file by running a number of injectors on it.

Arguments:
  FILE        Markdown file to update.
  MAINTAINER  Maintainer to filter packages by.
EOF
}

# Updates a given markdown file by running a number of injectors on it.
# Args:
#  $1: Markdown file to update.
#  $2: Maintainer to filter packages by.
rdm:update() {
    if [[ $# -ne 2 ]]; then
        rdm:usage
        exit 1
    fi

    local file="${1:?Specify file}"
    local maintainer="${2:?Specify maintainer}"
    local tmp_file="$(mktemp --suffix='.md')"
    cp "$file" "$tmp_file"

    if [[ -n "$maintainer" ]]; then
        rdm:inject_maintained_packages "$tmp_file" "$maintainer"
    fi

    mv "$tmp_file" "$file"
}

# Injects a list of maintained packages maintained by a specified user into a markdown file.
# Args:
#  $1: Markdown file to update.
#  $2: Maintainer to filter packages by.
rdm:inject_maintained_packages() {
    local begin_marker='<!-- BEGIN MAINTAINED_PACKAGES -->'
    local end_marker='<!-- END MAINTAINED_PACKAGES -->'

    local file="${1:?Specify file}"
    local maintainer="${2:?Specify maintainer}"
    local tmp_file="$(mktemp --suffix='.packages.md')"

    sed -n "1,/$begin_marker/p" "$file" >"$tmp_file"

    {
        echo "| Package | Version | AUR | Description |"
        echo "| ------- | ------- | --- | ----------- |"
    } >>"$tmp_file"

    while read -r package_json; do
        local description name url version
        {
            read -r description
            read -r name
            read -r url
            read -r version
        } < <(jq --raw-output '.Description, .Name, .URL, .Version' <<<"$package_json")
        local aur_url="https://aur.archlinux.org/packages/$name"
        if [[ ! -f "packages/$name/PKGBUILD" ]]; then
            name="$name¹"
        fi
        echo "| [$name]($url) | $version | [link]($aur_url) | $description |" >>"$tmp_file"
    done < <(rdm:get_maintained_packages "$maintainer")

    {
        echo
        echo "¹ - Package is maintained in the AUR but not in this repository."
        echo "    Check the PKGBUILD file of the package for more information."
    } >>"$tmp_file"

    sed -n "/$end_marker/,\$p" "$file" >>"$tmp_file"
    cp "$tmp_file" "$file"
    rm "$tmp_file"
}

# Gets a list of maintained packages maintained by a specified user.
# Returns JSON objects.
# Args:
#  $1: Maintainer to filter packages by.
rdm:get_maintained_packages() {
    local maintainer="${1:?Specify maintainer}"
    jq --null-input --compact-output '[inputs.results[]] | sort_by(.Name) | .[]' \
        <(curl -fsSL "https://aur.archlinux.org/rpc/v5/search/$maintainer?by=maintainer") \
        <(curl -fsSL "https://aur.archlinux.org/rpc/v5/search/$maintainer?by=comaintainers")
}

# Execute the main function if the script is not being sourced.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    rdm:update "$@"
fi
