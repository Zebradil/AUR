#!/bin/bash
# shellcheck disable=SC2024

set -euo pipefail

BIN_DIR="$(cd -- "$(dirname $(readlink -f -- "${BASH_SOURCE[0]}"))" &>/dev/null && pwd)"
LIB_DIR="$BIN_DIR/../lib"
source "$LIB_DIR/ci.sh"

# Default values
ASSETS="${ASSETS:-"*.install"}"
AUR_DEPS="${AUR_DEPS:-}"
BUILD_FLAGS="${BUILD_FLAGS:-"--clean --cleanbuild --nodeps"}"
COMMIT_MESSAGE="${COMMIT_MESSAGE:-"Update PKGBUILD and .SRCINFO with GitHub Actions"}"
POST_PROCESS="${POST_PROCESS:-}"
SSH_KEYSCAN_TYPES="${SSH_KEYSCAN_TYPES:-"rsa,dsa,ecdsa,ed25519"}"


REQUIRED_INPUTS=(
    COMMIT_EMAIL
    COMMIT_USERNAME
    PKGBUILD
    PKGNAME
    SSH_PRIVATE_KEY
)

for input in "${REQUIRED_INPUTS[@]}"; do
    ci::assert_non_empty "$input" "${!input}"
done

BOOLEAN_INPUTS=(
    ALLOW_EMPTY_COMMITS
    BUILD
    FORCE_PUSH
    SKIP_PUBLISH
    UPDPKGSUMS
)

for input in "${BOOLEAN_INPUTS[@]}"; do
    declare $input="${!input:-false}"
    ci::assert_boolean "$input" "${!input}"
done

# Overrides from the PKGBUILD file
ALLOWED_Z_VAR_NAMES=(
    _z_aur_deps
    _z_build
    _z_build_opts
    _z_update_hashsums
)
ALLOWED_Z_VAR_NAMES="${ALLOWED_Z_VAR_NAMES[*]}"
Z_VARS="$(grep -E "^(${ALLOWED_Z_VAR_NAMES// /|})=" "$PKGBUILD" || true)"

while read -r z_var; do
    log::debug "Evaluating $z_var"
    eval "$z_var"
done <<<"$Z_VARS"

if [[ -n ${_z_aur_deps:-} ]]; then
    AUR_DEPS="${_z_aur_deps[*]}"
fi

if [[ ${_z_build:-false} == "true" ]]; then
    BUILD=true
fi

if [[ -n ${_z_build_opts:-} ]]; then
    BUILD_FLAGS="${_z_build_opts[*]}"
fi

if [[ ${_z_update_hashsums:-false} == "true" ]]; then
    UPDPKGSUMS=true
fi

export HOME="/home/${APP_USER:?}"

# Ignore "." and ".." to prevent errors when glob pattern for assets matches hidden files
GLOBIGNORE=".:.."

LOCAL_REPO_DIR=/tmp/local-repo

log::group "Adding aur.archlinux.org to known hosts..."
ssh-keyscan -t "$SSH_KEYSCAN_TYPES" aur.archlinux.org >>~/.ssh/known_hosts
log::endgroup

ci::import_ssh_key "$SSH_PRIVATE_KEY"
ci::set_git_user "$COMMIT_USERNAME" "$COMMIT_EMAIL"

log::group "Cloning $PKGNAME into $LOCAL_REPO_DIR"
# Cloning is often fails, so we retry it
for i in {1..5}; do
    git clone --depth 1 -v "ssh://aur@aur.archlinux.org/${PKGNAME}.git" "$LOCAL_REPO_DIR" \
        && break
    delay=$((i * 5))
    log::warn "Cloning failed, retrying in $delay seconds..."
    sleep "$delay"
done
log::endgroup

log::group "Copying files into $LOCAL_REPO_DIR"
{
    log::info "Copying $PKGBUILD"
    cp -r "$PKGBUILD" "$LOCAL_REPO_DIR/PKGBUILD"
}
# shellcheck disable=SC2086
# Ignore quote rule because we need to expand glob patterns to copy $ASSETS
if [[ -n $ASSETS ]]; then
    log::info "Copying $ASSETS"
    cp --verbose --recursive --target-directory "$LOCAL_REPO_DIR/" $ASSETS || true
fi
log::endgroup

log::debug "Changing directory to $LOCAL_REPO_DIR"
cd "$LOCAL_REPO_DIR" || exit 1

if [[ $UPDPKGSUMS == "true" ]]; then
    log::group "Updating hashsums"
    updpkgsums
    log::endgroup
fi

if [[ $BUILD == "true" ]]; then
    if [[ -n $AUR_DEPS ]]; then
        log::group "Installing AUR dependencies"
        yay -Suy --noconfirm --needed $AUR_DEPS
        log::endgroup
    fi
    log::group "Building package with makepkg"
    read -r -a build_flags <<< "$BUILD_FLAGS"
    makepkg "${build_flags[@]}"
    log::endgroup
fi

log::group "Generating .SRCINFO"
makepkg --printsrcinfo >.SRCINFO
log::endgroup

if [[ -n $POST_PROCESS ]]; then
    log::group "Executing post process commands"
    eval "$POST_PROCESS"
    log::endgroup
fi

log::group "Committing files to the repository"
if [[ -z $ASSETS ]]; then
    # When $ASSETS are not set, we can add just PKGBUILD and .SRCINFO
    # This is to prevent unintended behaviour and maintain backwards compatibility
    git add -fv PKGBUILD .SRCINFO
else
    # We cannot just re-use $ASSETS because it contains absolute paths outside repository
    # But we can just add all files in the repository which should also include all $ASSETS
    git add --all
fi

if [[ $ALLOW_EMPTY_COMMITS == "true" ]]; then
    log::info "Allowing empty commits"
    git commit --allow-empty --message "$COMMIT_MESSAGE"
else
    log::info "Not allowing empty commits"
    git diff-index --quiet HEAD || git commit --message "$COMMIT_MESSAGE"
fi
log::endgroup

log::group "Publishing the repository"
if [[ $SKIP_PUBLISH == "false" ]]; then
    if [[ $FORCE_PUSH == "true" ]]; then
        log::info "Pushing to aur.archlinux.org with --force"
        git push -v --force origin master
    else
        log::info "Pushing to aur.archlinux.org"
        git push -v origin master
    fi
else
    log::info "Skipping publishing"
fi
log::endgroup
