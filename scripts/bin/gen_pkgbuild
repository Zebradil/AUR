#!/usr/bin/env bash

if [[ -n "${DEBUG:-}" ]]; then
    set -x
fi

set -euo pipefail

PKG_DIR=packages
BUILD_OPTS=(--noconfirm --noprogressbar --cleanbuild --clean --nodeps)

help() {
    cat <<EOF
Usage: $(basename "$0") AUR_PACKAGE

Generates a PKGBUILD file for the given AUR package.

AUR_PACKAGE is one of the directories in the $PKG_DIR/ directory.
            It must contain a pkgbuild_data.sh file.

pkgbuild_data.sh is a bash script that defines variables and functions
supported by the PKGBUILD file. It must define the following variables:
  - pkgname
  - pkgdesc
  - url
  - package (function)
The following variables are set to default values:
  - pkgver (date in YYYYMMDD format)
  - pkgrel (1, incremented if pkgver is the same as in the existing PKGBUILD)
  - license (unknown)
  - arch (any)
The following integrity arrays are recognized:
The following switches are accepted:
Variables prefixed with _z_ are always added to the generated PKGBUILD. They
can be used in PKGBUILD functions. For example, _z_name can be used to refer
to the tool name across all functions. The following variables modify the
publishing process:
  - _z_update_hashsums (instructs to run updpkgsums on the generated PKGBUILD)
  - _z_build (testes the generated PKGBUILD with makepkg)
  - _z_build_opts (options to pass to makepkg, default: ${BUILD_OPTS[*]})
EOF
}

if [[ $# -ne 1 ]]; then
    help
    exit 1
fi

BIN_DIR="$(cd -- "$(dirname $(readlink -f -- "${BASH_SOURCE[0]}"))" &>/dev/null && pwd)"
LIB_DIR="$BIN_DIR/../lib"
source "$LIB_DIR/logger.sh"
source "$LIB_DIR/pkgbuild.sh"

ROOT="$(git rev-parse --show-toplevel)"

AUR_PACKAGE="$1"

if [[ ! -d "$ROOT/$PKG_DIR/$AUR_PACKAGE" ]]; then
    log::error "Directory $ROOT/$PKG_DIR/$AUR_PACKAGE does not exist"
    exit 1
fi

log::info "Updating $AUR_PACKAGE..."

# shellcheck disable=SC1090
source "$ROOT/$PKG_DIR/$AUR_PACKAGE/pkgbuild_data.sh"

dest_pkgbuild="$ROOT/$PKG_DIR/$AUR_PACKAGE/PKGBUILD"

if [[ ! -f "$dest_pkgbuild" ]]; then
    log::warn "File $dest_pkgbuild does not exist, creating a new one..."
    {
        echo "# This is a temporary PKGBUILD file."
        echo "# It must have been overwritten by the update-all script."
        echo "# So, if you see this file, it means that something went wrong."
    } > "$dest_pkgbuild"
fi

dest_pkgver="$(sed -rn 's/^pkgver=(.+)/\1/p' "$dest_pkgbuild")"
dest_pkgrel="$(sed -rn 's/^pkgrel=(.+)/\1/p' "$dest_pkgbuild")"

tmp_pkgbuild="$dest_pkgbuild.tmp"
if [[ -f "$tmp_pkgbuild" ]]; then
    log::debug "Removing old $tmp_pkgbuild..."
    rm "$tmp_pkgbuild"
fi

log::debug "Generating $tmp_pkgbuild..."

contributors=("${contributors[@]:-}")
pkgb:header contributors > "$tmp_pkgbuild"

tmp_pkgver="${pkgver:-$(date +%Y%m%d)}"
tmp_pkgrel="${pkgrel:-1}"

if [[ "$dest_pkgver" == "$tmp_pkgver" ]]; then
    tmp_pkgrel="$((dest_pkgrel + 1))"
fi

cat <<EOF >>"$tmp_pkgbuild"
pkgname=${pkgname:?}
pkgver=${tmp_pkgver}
pkgrel=${tmp_pkgrel}
pkgdesc='${pkgdesc:?}'
url='${url:?}'
arch=(${arch[@]:-any})
license=(${license[@]:-unknown})
EOF

arrays=(
    groups
    backup
)

for field in "${arrays[@]}"; do
    pkgb:print_arr_by_name "$field"
done >>"$tmp_pkgbuild"

# list of arrays that can be arch-specific
arched_arrays=(
    depends
    makedepends
    checkdepends
    optdepends
    conflicts
    provides
    replaces
    source
    b2sums
    sha512sums
    sha384sums
    sha256sums
    sha224sums
    sha1sums
    md5sums
    cksums
)

for field in "${arched_arrays[@]}"; do
    pkgb:print_arr_by_name "$field"
    for a in "${arch[@]:-}"; do
        pkgb:print_arr_by_name "${field}_${a}"
    done
done >>"$tmp_pkgbuild"

{
    declare -f prepare || true
    declare -f build || true
    declare -f check || true

    if ! declare -f package; then
        log::error "package() function is not defined"
        exit 1
    fi
} >>"$tmp_pkgbuild"

if [[ -n ${_z_update_hashsums-} ]]; then
    log::debug "Hashsums update is requested, running updpkgsums..."
    updpkgsums "$tmp_pkgbuild"
    unset _z_update_hashsums
fi

if [[ -n ${_z_build-} ]]; then
    log::debug "Build is requested, setting _z_build_opts to ${_z_build_opts:-${BUILD_OPTS[*]}}..."
    _z_build_opts="${_z_build_opts:-${BUILD_OPTS[*]}}"
fi

# If there are _z_* variables defined, add them to the generated PKGBUILD
zvars="$(declare -p | sed -rn 's/^declare -..? (_z_[^=]+)=(.+)/\1=\2/p')"
if [[ -n "$zvars" ]]; then
    log::debug "Adding _z_* variables to the generated PKGBUILD..."
    echo -e "\n\n# Custom variables\n" >>"$tmp_pkgbuild"
    echo "$zvars" >>"$tmp_pkgbuild"
fi

if diff -q \
    <(sed '/^pkgver=/d; /^pkgrel=/d' "$dest_pkgbuild") \
    <(sed '/^pkgver=/d; /^pkgrel=/d' "$tmp_pkgbuild") \
    >/dev/null; then
    log::info "No changes (excluding pkgver and pkgrel)"
    exit 0
fi

log::info "Moving $tmp_pkgbuild to $dest_pkgbuild..."
mv "$tmp_pkgbuild" "$dest_pkgbuild"
